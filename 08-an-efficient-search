In this example, we return to the problem of searching using a more sophisticated approach than in naive search, above. Assume that the input array is always sorted. What is the Big O of the following algorithm? Explain your answer

function efficientSearch(array, item) {                         // [1,2,3,4,5,6,7,8,9,10], 1
    let minIndex = 0;                                           // 
    let maxIndex = array.length - 1;                            // {0} maxIndex = 9 {4} 3
    let currentIndex;
    let currentElement;

    while (minIndex <= maxIndex) {  // this is a loop
        currentIndex = Math.floor((minIndex + maxIndex) / 2);   // {1} currentIndex = 4
        currentElement = array[currentIndex];                   // {2} currentElement = 5

        if (currentElement < item) {                            // 
            minIndex = currentIndex + 1;                        // 
        }
        else if (currentElement > item) {                       // {3} 5 > 1
            maxIndex = currentIndex - 1;                        // {3} maxIndex = 3
        }
        else {
            return currentIndex;                                // 
        }
    }
    return -1;
}

  Logarithmic - O(log n)
  Line 10 divides the search in half every time this loop is run.