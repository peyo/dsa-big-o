14. Iterative Big O

Take your solutions from the iterative exercises today and identify the time complexities (big O) of each of them.

1. Counting Sheep

  Linear O(n)
  Count up to input

    const count = (input) => {

      for (let i = 0; i < input; i++) {
        console.log(`${i + 1}: Another sheep jumps over the fence`)
      }
      return `All sheep jumped over the fence.`
    }

    const input = 4;
    console.log(count(input));

2. Power Calculator

  Linear O (n)
  Count up to e

    const exp = (b, e) => {

      let c = b
      for (i = 0; i < e; i++) {
        c *= b
      }
      return c;
    }
    
    const b = 10;
    const e = 4;
    console.log(exp(b, e));

3. Reverse String

  Linear O(n)
  Count down to 0

    const rev = (str) => {

      let reversedStr = []
      for (let i = str.length - 1; i >= 0; i--) {
        reversedStr.push(str[i]);
      }
      return reversedStr.join("")
    }

    const str = "hello world!";
    console.log(rev(str));

    OR

    const rev = (str) => {

      let reversedStr = []
      for (let i = str.length - 1; i >= 0; i--) {
        reversedStr += str[i];
      }
      return reversedStr
    }

    const str = "hello world!";
    console.log(rev(str));

4. nth Triangular Number

  Linear O(n)
  Count down to 0

    const tri = (n) => {

      let sum = 0
      for (let i = n; i > 0; i--) {
        sum += i
      }

      return sum
    }

    console.log(tri(3))

5. String Splitter

  Linear O(n)
  Count up to str.length

    const split = function (str, delim) {
      let arr = [""];
      let j = 0;

      for (let i = 0; i < str.length; i++) {
        if (str.charAt(i) === delim) {
          j++;
          arr.push("");
        } else {
          arr[j] = arr[j] + str.charAt(i);
        }
      }
      return arr;
    };

    console.log(split("02/20/2020", "/"));

    // Reference:
    // https://stackoverflow.com/questions/24765710/writing-a-string-splitting-function-without-using-the-split-method-in-javascript

6. Fibonacci

  Linear O(n)
  Count up to n

    const fib = (n) => {

      let fibArr = [0, 1]
      for (let i = 2; i <= n; i++) {
        fibArr.push(fibArr[i - 2] + fibArr[i - 1])
      } 
      return fibArr[n]
    }

    const n = 10;
    console.log(fib(n));

7. Factorial

  Linear O(n)
  Count down to 1

    const fact = (n) => {
      let x = n;

      for (let i = n-1; i > 0; i--) {
        x *= i
      }
      return x;
    }

    console.log(fact(5));